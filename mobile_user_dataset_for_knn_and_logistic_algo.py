# -*- coding: utf-8 -*-
"""mobile user dataset FOR KNN AND LOGISTIC algo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MvdCtgQCNvfgTY1t_iTllTMN1_soUAam

# **FOR LOGISTIC ALGORITHM::**
"""

# IMPORT LIBRARIES
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# data read
path="/content/mobile user dataset.csv"
data=pd.read_csv(path)
data.head()

# DATA CONVERTED INTO NUMERICAL FORM
from sklearn import preprocessing
le=preprocessing.LabelEncoder()
data['Gender']=le.fit_transform(data['Gender'])
data['Device Model']=le.fit_transform(data['Device Model'])
data['Operating System']=le.fit_transform(data['Operating System'])
data.head()

# FIND THE VALUES OF X AND Y?
x=data[["Gender","Device Model","Operating System","App Usage Time (min/day)","Screen On Time (hours/day)","Battery Drain (mAh/day)","Number of Apps Installed","Data Usage (MB/day)","Age"]]
y=data["User Behavior Class"]
print(x)
print(y)

# using train_test_split
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
print(x_train)
print(x_test)
print(y_train)
print(y_test)

# APPLY LOGISTICREGRESSION
from sklearn.linear_model import LogisticRegression
logreg=LogisticRegression()
logreg.fit(x_train,y_train)
y_pred=logreg.predict(x_test)
print(y_pred)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn import metrics
cnf_matrix=metrics.confusion_matrix(y_test,y_pred)
cnf_matrix

class_names=[0,1]
fig,ax=plt.subplots()
tick_marks=np.arange(len(class_names))
plt.xticks(tick_marks,class_names)
plt.yticks(tick_marks,class_names)
sns.heatmap(pd.DataFrame(cnf_matrix),annot=True,cmap="YlGnBu",fmt='g')
ax.xaxis.set_label_position("bottom")
plt.tight_layout()
plt.title('Confusion Matrix',y=1.1)
plt.ylabel('Actual Label')
plt.xlabel('Predicted Label')

# find the accuracy of logistic regression
print("Accuracy:",metrics.accuracy_score(y_test,y_pred))

# find the precision,recall and F1 score:::
print("Precision:",metrics.precision_score(y_test,y_pred,average="macro"))
print("Recall:",metrics.recall_score(y_test,y_pred,average="macro"))
print("F1 Score:",metrics.f1_score(y_test,y_pred,average="macro"))

"""## FOR KNN ALGORITHM"""

# IMPORT LIBRARIES
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# DATA READ
path="/content/mobile user dataset.csv"
data=pd.read_csv(path)
data.head()

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
data['Gender'] = le.fit_transform(data['Gender'])
data['Device Model'] = le.fit_transform(data['Device Model'])
data['Operating System'] = le.fit_transform(data['Operating System'])
data.head()

x = data[['Gender','Device Model','Operating System','App Usage Time (min/day)','Screen On Time (hours/day)','Battery Drain (mAh/day)','Number of Apps Installed','Data Usage (MB/day)','Age']].values
y = data['User Behavior Class'].values
print(x,y)

# # training,testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)
print(x_train)
print(x_test)
print(y_train)
print(y_test)

#APPLY KNN ALGORITHM
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(x_train,y_train)
y_pred = knn.predict(x_test)
print(y_pred)
print(y_test)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# FIND THE CONFUSION MATRIX
from sklearn import metrics
cnf_matrix=metrics.confusion_matrix(y_test,y_pred)
cnf_matrix

class_names=[0,1]
fig,ax=plt.subplots()
tick_marks=np.arange(len(class_names))
plt.xticks(tick_marks,class_names)
plt.yticks(tick_marks,class_names)
sns.heatmap(pd.DataFrame(cnf_matrix),annot=True,cmap="YlGnBu",fmt='g')
ax.xaxis.set_label_position("bottom")
plt.tight_layout()
plt.title('Confusion Matrix',y=1.1)
plt.ylabel('Actual Label')
plt.xlabel('Predicted Label')

# find the accuracy of logistic regression
print("Accuracy:",metrics.accuracy_score(y_test,y_pred))

# find the precision,recall and F1 score:::
print("Precision:",metrics.precision_score(y_test,y_pred,average="macro"))
print("Recall:",metrics.recall_score(y_test,y_pred,average="macro"))
print("F1 Score:",metrics.f1_score(y_test,y_pred,average="macro"))

"""# conclusion::=knn algorithm is better than logistic regression
because accuracy of knn is more than logisticregression

# ACCURACY OF KNN==1.0   #MEANS 100 %
# ACCURACY OF LOGISTICREGRESSION==0.65  # MEANS 65 %

"""